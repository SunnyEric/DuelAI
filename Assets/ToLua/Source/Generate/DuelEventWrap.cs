//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DuelEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DuelEvent), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetThisCard", SetThisCard);
		L.RegFunction("InActivePhase", InActivePhase);
		L.RegFunction("Precheck", Precheck);
		L.RegFunction("SetActivatableEffect", SetActivatableEffect);
		L.RegFunction("SetChainableEffect", SetChainableEffect);
		L.RegFunction("SetCounterableEffect", SetCounterableEffect);
		L.RegFunction("DrawnCard", DrawnCard);
		L.RegFunction("DrawCard", DrawCard);
		L.RegFunction("ShowCard", ShowCard);
		L.RegFunction("NormalSummon", NormalSummon);
		L.RegFunction("SpecialSummon", SpecialSummon);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("duelData", get_duelData, set_duelData);
		L.RegVar("thiscard", get_thiscard, set_thiscard);
		L.RegVar("precheck", get_precheck, set_precheck);
		L.RegVar("activatable", get_activatable, set_activatable);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetThisCard(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			DuelCard arg0 = (DuelCard)ToLua.CheckObject<DuelCard>(L, 2);
			obj.SetThisCard(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InActivePhase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			bool o = obj.InActivePhase();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Precheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			obj.Precheck();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetActivatableEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.SetActivatableEffect(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetActivatableEffect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DuelEvent.SetActivatableEffect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetChainableEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.SetChainableEffect(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetChainableEffect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DuelEvent.SetChainableEffect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCounterableEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.SetCounterableEffect(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetCounterableEffect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DuelEvent.SetCounterableEffect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawnCard(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.DrawnCard(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawCard(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.DrawCard(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowCard(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.ShowCard(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NormalSummon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.NormalSummon(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SpecialSummon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DuelEvent obj = (DuelEvent)ToLua.CheckObject<DuelEvent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SpecialSummon(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_duelData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			DuelDataManager ret = obj.duelData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index duelData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_thiscard(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			DuelCard ret = obj.thiscard;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index thiscard on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_precheck(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			bool ret = obj.precheck;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index precheck on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_activatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			bool ret = obj.activatable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index activatable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_duelData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			DuelDataManager arg0 = (DuelDataManager)ToLua.CheckObject<DuelDataManager>(L, 2);
			obj.duelData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index duelData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_thiscard(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			DuelCard arg0 = (DuelCard)ToLua.CheckObject<DuelCard>(L, 2);
			obj.thiscard = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index thiscard on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_precheck(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.precheck = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index precheck on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_activatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DuelEvent obj = (DuelEvent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.activatable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index activatable on a nil value");
		}
	}
}

